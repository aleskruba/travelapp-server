generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id                     Int           @id @default(autoincrement())
  username               String?       @db.VarChar(255)
  firstName              String?       @db.VarChar(255)
  lastName               String?       @db.VarChar(255)
  email                  String        @unique @db.VarChar(255)
  registrationDate       DateTime?     @default(now()) @db.Timestamp(0)
  password               String?       @db.VarChar(255)
  image                  String?       @db.VarChar(255)
  googleId               String?       @db.VarChar(255)
  googleEmail            String?       @db.VarChar(255)
  googleName             String?       @db.VarChar(255)
  googleProfilePicture   String?       @db.VarChar(255)
  reset_token_hash       String?       @db.VarChar(64)
  reset_token_expires_at DateTime?     @db.DateTime(0)
  passwordUpdatedAt      DateTime?     @db.DateTime(0) 
    isAdmin                Boolean       @default(false)
  message                message[]
  reply                  reply[]
  tour                   tour[]
  tourmessage            tourmessage[]
  tourreply              tourreply[]
  video                  video[]
  votes                  votes[]
  votesreply             votesreply[]
  loginLogs             LoginLog[] // New relation to LoginLog
}

model message {
  id         Int          @id @default(autoincrement())
  date       DateTime?    @default(now()) @db.Timestamp(0)
  message    String?      @db.MediumText
  user_id    Int?
  country    String?      @db.VarChar(255)
  user       user?        @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "message_ibfk_3")
  reply      reply[]
  votes      votes[]
  votesreply votesreply[]

  @@index([user_id], map: "user_id")
}

model reply {
  id         Int          @id @default(autoincrement())
  date       DateTime?    @default(now()) @db.Timestamp(0)
  message    String?      @db.MediumText
  message_id Int?
  user_id    Int?
  parentMessage    message?     @relation(fields: [message_id], references: [id], onDelete: Cascade, map: "reply_ibfk_3")
  user       user?        @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "reply_ibfk_4")
  votesreply votesreply[]

  @@index([message_id], map: "message_id")
  @@index([user_id], map: "user_id")
}

model tour {
  id             Int           @id @default(autoincrement())
  destination    String?       @db.VarChar(255)
  date           DateTime?     @default(now()) @db.Timestamp(0)
  tourdate       DateTime?     @db.Date
  tourdateEnd    DateTime?     @db.Date
  tourtype       String?       @db.LongText
  fellowtraveler String?       @db.VarChar(255)
  aboutme        String?       @db.VarChar(255)
  user_id        Int?
  user           user?         @relation(fields: [user_id], references: [id], onUpdate: SetNull, map: "tour_ibfk_4")
  tourmessage    tourmessage[]

  @@index([user_id], map: "user_id")
}

model tourmessage {
  id        Int         @id @default(autoincrement())
  date      DateTime?   @default(now()) @db.Timestamp(0)
  message   String?     @db.Text
  user_id   Int?
  tour_id   Int?
  tour      tour?       @relation(fields: [tour_id], references: [id], onDelete: Cascade, map: "tourmessage_ibfk_5")
  user      user?       @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "tourmessage_ibfk_6")
  tourreply tourreply[]

  @@index([tour_id], map: "tour_id")
  @@index([user_id], map: "user_id")
}

model tourreply {
  id             Int          @id @default(autoincrement())
  date           DateTime?    @default(now()) @db.Timestamp(0)
  message        String?      @db.Text
  messagetype    Int?
  user_id        Int?
  tourmessage_id Int?
  user           user?        @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "tourreply_ibfk_3")
  tourmessage    tourmessage? @relation(fields: [tourmessage_id], references: [id], onDelete: Cascade, map: "tourreply_ibfk_4")

  @@index([tourmessage_id], map: "tourmessage_id")
  @@index([user_id], map: "user_id")
}



model video {
  id      Int     @id @default(autoincrement())
  country String? @db.VarChar(255)
  title   String? @db.VarChar(255)
  video   String? @db.VarChar(255)
  user_id Int?
  user    user?   @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "video_ibfk_1")

  @@index([user_id], map: "user_id")
}

model votes {
  id         Int              @id @default(autoincrement())
  user_id    Int?
  message_id Int?
  vote_type  votes_vote_type?
  vote_date  DateTime?        @default(now()) @db.Timestamp(0)
  user       user?            @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "votes_ibfk_3")
  message    message?         @relation(fields: [message_id], references: [id], onDelete: Cascade, map: "votes_ibfk_4")

  @@unique([user_id, message_id], map: "user_id")
  @@index([message_id], map: "message_id")
}

model votesreply {
  id         Int                   @id @default(autoincrement())
  user_id    Int?
  reply_id   Int?
  message_id Int?
  vote_type  votesreply_vote_type?
  vote_date  DateTime?             @default(now()) @db.Timestamp(0)
  user       user?                 @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "votesreply_ibfk_4")
  message    message?              @relation(fields: [message_id], references: [id], onDelete: Cascade, map: "votesreply_ibfk_5")
  reply      reply?                @relation(fields: [reply_id], references: [id], onDelete: Cascade, map: "votesreply_ibfk_6")

  @@unique([user_id, reply_id, message_id], map: "user_id")
  @@index([message_id], map: "message_id")
  @@index([reply_id], map: "reply_id")
}

enum votes_vote_type {
  thumb_up
  thumb_down
}

enum votesreply_vote_type {
  thumb_up
  thumb_down
}

model LoginLog {
  id            Int       @id @default(autoincrement())
  user          user      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id       Int
  timestamp     DateTime  @default(now()) @db.Timestamp(0)
  ipAddress     String?   @db.VarChar(45) // Supports both IPv4 and IPv6
  status        String    @db.VarChar(20) // e.g., "SUCCESS" or "FAILURE"
  failureReason String?   @db.VarChar(255) // Optional: only for failed attempts
  
  @@index([user_id, timestamp], map: "user_timestamp_idx")
}
